Constraint:
	Root				<  Ternary eoi
	
	Ternary				<  MonadicBoolOperator? TernaryValue DyadicBoolOperator?
	
	MonadicBoolOperator	<  Not
	DyadicBoolOperator	<  (And / Or) Ternary
	
	And					<~ [Aa][Nn][Dd]
	Or					<~ [Oo][Rr]
	Not					<~ [Nn][Oo][Tt]
	
	TernaryValue		<  TernaryParens / Existance / NullComparisonPred / ValueComparisonPred / InPred / LikePred / FunctionCall
	
	TernaryParens		<  "(" Ternary ")"
	Existance			<  Exists "(" Symbol ")"
	NullComparisonPred	<  Value Is Not? Null
	ValueComparisonPred	<  Value ComparisonOperator Value
	InPred				<  Value Not? In '(' Literal (',' Literal)* ')'
	LikePred			<  Value Not? Like Value
	
	Exists				<~ [Ee][Xx][Ii][Ss][Tt][Ss]
	Is					<~ [Ii][Ss]
	Null				<~ [Nn][Uu][Ll][Ll]
	In					<~ [Ii][Nn]
	Like				<~ [Ll][Ii][Kk][Ee]
	ComparisonOperator	<  "<>" / "!=" /  ">=" / "<=" / "=" / "<" / ">"
	Symbol				<  identifier
	
	Value				<  Arithmetic / PrimaryValue
	PrimaryValue		<  ValueParens / Formula / Parameter / FunctionCall / Attribute / RemoteAttribute / Literal
	
	Arithmetic			<  PrimaryValue ('+') Value
	ValueParens			<  '(' Value ')'
	Formula				<~ '@' [Ff][Oo][Rr][Mm][Uu][Ll][Aa] (!' ' .)+
	Parameter			<- '@' Symbol
	FunctionCall		<- FunctionName '(' FunctionArgs? ')'
	Attribute			<- Object '.' Symbol
	RemoteAttribute		<- RemoteNode '.' Symbol
	Literal				<- StringLiteral / NumericLiteral
	
	FunctionName		<- Symbol ('.' Symbol)*
	FunctionArgs		<  Value (',' Value)*
	Object				<~ [Oo][Bb][Jj][Ee][Cc][Tt]
	RemoteNode			<- '[' RemoteNodeName ']'
	RemoteNodeName		<~ (!']' .)+
	StringLiteral		<~ "'" Char* "'"
	Char				<- "''" / (!"'" .)
	NumericLiteral		<- (([1-9] [0-9]*) / [0-9]) ('.' [0-9]+)?