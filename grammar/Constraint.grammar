Constraint:
	Root				<  Ternary eoi
	
	Ternary				<  (MonadicBoolOperator / TernaryValue) DyadicBoolOperator?
	
	MonadicBoolOperator	<  Not TernaryValue
	DyadicBoolOperator	<  (And / Or) Ternary
	
	TernaryValue		<  TernaryParens / ExistsPred / NullComparisonPred / ValueComparisonPred / InPred / LikePred / BetweenPred / FunctionCall
	
	TernaryParens		<  "(" Ternary ")"
	ExistsPred			<  Exists "(" ConstraintQueryName ")"
	NullComparisonPred	<  Value Is Not? Null
	ValueComparisonPred	<  Value ComparisonOperator Value
	InPred				<  Value Not? In '(' Literal (',' Literal)* ')'
	LikePred			<  Value Not? Like Value
	BetweenPred			<  Value Not? Between Value And Value
	
	ComparisonOperator	<  "<>" / "!=" /  ">=" / "<=" / "=" / "<" / ">"
	ConstraintQueryName	<~ (!')' .)+
	Symbol				<  identifier
	
	Value				<  Arithmetic / PrimaryValue
	PrimaryValue		<  ValueParens / Formula / Parameter / FunctionCall / Attribute / RemoteAttribute / Literal
	
	Arithmetic			<  PrimaryValue ArithmeticOperator Value
	ValueParens			<  '(' Value ')'
	Formula				<~ '@' FormulaLiteral (!' ' .)+
	Parameter			<- '@' ParameterName
	FunctionCall		<- FunctionName '(' FunctionArgs? ')'
	Attribute			<- (Object '.')? Symbol
	RemoteAttribute		<- RemoteNode '.' Symbol
	Literal				<- StringLiteral / NumericLiteral
	
	ArithmeticOperator	<  '+' / '-' / '/' / '*' # TODO: Operator precedence
	ParameterName		<~ (uniAlphaNum / '-' / '.' / '_')+
	FunctionName		<- Symbol ('.' Symbol)*
	FunctionArgs		<  Value (',' Value)*
	RemoteNode			<- '[' RemoteNodeName ']'
	RemoteNodeName		<~ (!']' .)+
	StringLiteral		<~ "'" Char* "'"
	Char				<- "''" / (!"'" .)
	NumericLiteral		<~ '-'? [0-9]+ ('.' [0-9]+)?
	
	# Pegged doesn't support case insensitive matching. The following definitions are a workaround to support CI keywords.
	And					<~ [Aa][Nn][Dd]
	Between				<~ [Bb][Ee][Tt][Ww][Ee][Ee][Nn]
	Exists				<~ [Ee][Xx][Ii][Ss][Tt][Ss]
	FormulaLiteral		<~ [Ff][Oo][Rr][Mm][Uu][Ll][Aa]
	In					<~ [Ii][Nn]
	Is					<~ [Ii][Ss]
	Like				<~ [Ll][Ii][Kk][Ee]
	Not					<~ [Nn][Oo][Tt]
	Null				<~ [Nn][Uu][Ll][Ll]
	Object				<~ [Oo][Bb][Jj][Ee][Cc][Tt]
	Or					<~ [Oo][Rr]